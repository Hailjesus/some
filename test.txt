import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Test;

public class MemberCoverageEntityTest {

    @Test
    public void testApplyGroupfilterCoverageEntitiesWithFilteredDates() {
        // Mock data for memberCoverageEntities
        MemberCoverageDetails mockDetails = mock(MemberCoverageDetails.class);
        when(mockDetails.getMemberCoverages()).thenReturn(new ArrayList<>());

        MemberCoverageEntity memberCoverageEntity = new MemberCoverageEntity();
        memberCoverageEntity.setGroupId("Group1");
        memberCoverageEntity.setMemberDetails(mockDetails);

        List<MemberCoverageEntity> memberCoverageEntities = List.of(memberCoverageEntity);

        // Mock data for groupFilter
        GroupFilter mockGroupFilter = new GroupFilter();
        mockGroupFilter.setGroupId("Group1");
        mockGroupFilter.setGroupAssoicationStartDate("2023-01-01");
        mockGroupFilter.setGroupAssoicationEndDate("2023-12-31");

        List<GroupFilter> groupFilters = List.of(mockGroupFilter);

        // Call the method
        List<MemberCoverageEntity> filteredEntities =
                MemberCoverageEntity.applyGroupfilterCoverageEntities(memberCoverageEntities, groupFilters);

        // Assertions
        assertNotNull(filteredEntities);
        assertEquals(1, filteredEntities.size());
        MemberCoverageDetails updatedDetails = filteredEntities.get(0).getMemberDetails();

        assertNotNull(updatedDetails);
        verify(mockDetails, times(1)).setMemberCoverages(anyList());
    }

    @Test
    public void testApplyGroupfilterCoverageEntitiesWithEmptyFilters() {
        // Mock data for memberCoverageEntities
        MemberCoverageDetails mockDetails = mock(MemberCoverageDetails.class);
        MemberCoverageEntity memberCoverageEntity = new MemberCoverageEntity();
        memberCoverageEntity.setGroupId("Group1");
        memberCoverageEntity.setMemberDetails(mockDetails);

        List<MemberCoverageEntity> memberCoverageEntities = List.of(memberCoverageEntity);

        // Empty groupFilter
        List<GroupFilter> groupFilters = new ArrayList<>();

        // Call the method
        List<MemberCoverageEntity> filteredEntities =
                MemberCoverageEntity.applyGroupfilterCoverageEntities(memberCoverageEntities, groupFilters);

        // Assertions
        assertTrue(filteredEntities.isEmpty());
        verify(mockDetails, never()).setMemberCoverages(anyList());
    }

    @Test
    public void testApplyGroupfilterCoverageEntitiesWithNullValues() {
        // Mock data for memberCoverageEntities
        MemberCoverageDetails mockDetails = mock(MemberCoverageDetails.class);
        MemberCoverageEntity memberCoverageEntity = new MemberCoverageEntity();
        memberCoverageEntity.setGroupId(null);
        memberCoverageEntity.setMemberDetails(mockDetails);

        List<MemberCoverageEntity> memberCoverageEntities = List.of(memberCoverageEntity);

        // Mock data for groupFilter
        GroupFilter mockGroupFilter = new GroupFilter();
        mockGroupFilter.setGroupId("Group1");
        mockGroupFilter.setGroupAssoicationStartDate("2023-01-01");
        mockGroupFilter.setGroupAssoicationEndDate("2023-12-31");

        List<GroupFilter> groupFilters = List.of(mockGroupFilter);

        // Call the method
        List<MemberCoverageEntity> filteredEntities =
                MemberCoverageEntity.applyGroupfilterCoverageEntities(memberCoverageEntities, groupFilters);

        // Assertions
        assertTrue(filteredEntities.isEmpty());
        verify(mockDetails, never()).setMemberCoverages(anyList());
    }
}
